name: Build and Upload Python Package

on:
  # release:
  #   types: [published]
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  linux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
        # python-version: ["3.13"]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Build on manylinux
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/project \
            -w /project \
            quay.io/pypa/manylinux_2_28_x86_64 \
            bash ./.github/build_manylinux.sh ${{ matrix.python-version }}

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: linux-dist-${{ matrix.python-version }}
          path: dist

  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
        # python-version: ["3.13"]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions/setup-python@v5
        id: cp
        with:
          python-version: ${{ matrix.python-version }}

      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v2

      - uses: Jarod42/install-premake5@v1

      - name: Build library
        run: |
          cd PrjBarlib
          premake5 vs2022 --python-include-path=${{ env.pythonLocation }}/include --python-lib-path=${{ env.pythonLocation }}/libs --python-version=${{ matrix.python-version }}

          cd build
          msbuild /p:Configuration=python /p:Platform=x64 Barlib.vcxproj

      - name: Make package
        run: |
          cd PrjBarlib/build
          ../modules/python/make_package.bat Python ${{ steps.cp.outputs.python-path }}
          xcopy Python\BarcodeProject\dist ..\..\dist /Q /E /Y /I

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: windows-dist-${{ matrix.python-version }}
          path: ${{ github.workspace }}/dist

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - linux-build
      - windows-build

    permissions:
      id-token: write

    environment:
      name: pypi
      url: https://pypi.org/project/ImageTopoDec

    steps:
      - name: Retrieve Linux distributions
        uses: actions/download-artifact@v4
        with:
          pattern: linux-dist-*
          merge-multiple: true
          path: dist
      - run: ls -R dist

      - name: Retrieve Windows distributions
        uses: actions/download-artifact@v4
        with:
          pattern: windows-dist-*
          merge-multiple: true
          path: dist
      - run: ls -R dist

      - name: Validate wheels
        run: |
          python -m pip install twine
          twine check dist/*

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
